// Code generated by MockGen. DO NOT EDIT.
// Source: internal/email/email.go

// Package mocks is a generated GoMock package.
package mocks

import (
	template "html/template"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	form "github.com/hivemindd/communication-service/internal/form"
)

// MockEmailProvider is a mock of EmailProvider interface.
type MockEmailProvider struct {
	ctrl     *gomock.Controller
	recorder *MockEmailProviderMockRecorder
}

// MockEmailProviderMockRecorder is the mock recorder for MockEmailProvider.
type MockEmailProviderMockRecorder struct {
	mock *MockEmailProvider
}

// NewMockEmailProvider creates a new mock instance.
func NewMockEmailProvider(ctrl *gomock.Controller) *MockEmailProvider {
	mock := &MockEmailProvider{ctrl: ctrl}
	mock.recorder = &MockEmailProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailProvider) EXPECT() *MockEmailProviderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockEmailProvider) Send(email form.Email, template *template.Template) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", email, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEmailProviderMockRecorder) Send(email, template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailProvider)(nil).Send), email, template)
}
